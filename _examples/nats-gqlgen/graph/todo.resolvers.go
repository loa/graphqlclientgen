package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"errors"
	"fmt"
	"nats-gqlgen/graph/model"

	"github.com/google/uuid"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	var userID uuid.UUID
	for _, user := range r.DB.Users {
		if user.ID == input.User {
			userID = user.ID
		}
	}
	if userID == uuid.Nil {
		return nil, errors.New("user not found")
	}

	todo := model.Todo{
		ID:     fmt.Sprint(r.DB.TodosIncrementalID),
		Text:   input.Text,
		UserID: userID,
	}
	r.DB.TodosIncrementalID += 1

	r.DB.Todos = append(r.DB.Todos, &todo)

	return &todo, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id string) (*model.Todo, error) {
	for _, todo := range r.DB.Todos {
		if todo.ID == id {
			return todo, nil
		}
	}
	return nil, errors.New("not found")
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.DB.Todos, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	for _, user := range r.DB.Users {
		if user.ID == obj.UserID {
			return user, nil
		}
	}
	return nil, errors.New("not found")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
