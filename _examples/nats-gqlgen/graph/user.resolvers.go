package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"errors"
	"nats-gqlgen/graph/model"

	"github.com/google/uuid"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uuid.UUID) (*model.User, error) {
	for _, user := range r.DB.Users {
		if user.ID == id {
			return user, nil
		}
	}
	return nil, errors.New("not found")
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	return r.DB.Users, nil
}

// Todos is the resolver for the todos field.
func (r *userResolver) Todos(ctx context.Context, obj *model.User) ([]*model.Todo, error) {
	todos := []*model.Todo{}
	for _, todo := range r.DB.Todos {
		if todo.UserID == obj.ID {
			todos = append(todos, todo)
		}
	}
	return todos, nil
}

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
