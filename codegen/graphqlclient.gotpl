// Code generated by github.com/loa/graphqlclientgen, DO NOT EDIT.

package {{ .Config.Client.Package }}

import (
	"context"

    "github.com/loa/graphqlclientgen"
)

type (
    // Client for graphqlclient
    Client struct {
		protoClient graphqlclientgen.ProtoClient
    }

{{ range $type := .Schema.Types }}
    // {{ $type.Name }} {{ stripPrefix $type.Description $type.Name }}
    {{ $type.Name }} struct {
        {{- range $name, $field := $type.Fields }}
            // {{ $name | capitalize | initialism }} {{ stripPrefix $field.Description $name }}
            {{ $name | capitalize | initialism }} {{ if $field.List }}[]{{ end }}{{ if or (not $field.NonNull) (eq $field.Kind "OBJECT") }}*{{ end }}{{ $field.Name }} `json:"{{ $name }}"`
        {{- end }}
    }
{{ end }}
)

// New create new graphqlclient
func New(protoClient graphqlclientgen.ProtoClient) Client {
	return Client{
		protoClient: protoClient,
	}
}

{{- range $fun := .Schema.Functions }}
// {{ $fun.Name | capitalize }} ({{ $fun.QueryType }}) {{ stripPrefix $fun.Description $fun.Name }}
func (client Client) {{ $fun.Name | capitalize }}(ctx context.Context) (

{{- if $fun.Type.List }}[]{{ end }}{{ if not $fun.Type.NonNull }}*{{ end }}{{ $fun.Type.Name }}, error) {
    body := graphqlclientgen.Body{
        Query: "{{ $fun.QueryType }} { {{ $fun.Name }} {}}",
    }


    {{ if $fun.Type.List }}
    var res []{{ if not $fun.Type.NonNull }}*{{ end }}{{ $fun.Type.Name }}
    {{- else }}
    var res {{ $fun.Type.Name }}
    {{- end }}

    if err := client.protoClient.Do(ctx, body, &res); err != nil {
        {{- if and $fun.Type.NonNull (not $fun.Type.List)}}
        return {{ $fun.Type.Name }}{}, err
        {{- else }}
        return nil, err
        {{- end }}
    }

    {{ if $fun.Type.NonNull }}
    return res, nil
    {{- else }}
    return &res, nil
    {{- end }}
}
{{ end }}