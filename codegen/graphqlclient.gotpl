// Code generated by github.com/loa/graphqlclientgen, DO NOT EDIT.

package {{ .Config.Client.Package }}

import (
	"context"
	"encoding/json"
	"errors"

    "github.com/loa/graphqlclientgen"
)

type (
    // Client for graphqlclient
    Client struct {
		protoClient graphqlclientgen.ProtoClient
    }

{{ range $type := .Schema.Types }}
    // {{ $type.Name }} {{ stripPrefix $type.Description $type.Name }}
    {{ $type.Name | capitalize }} struct {
        {{- range $name, $field := $type.Fields }}
            // {{ $name | capitalize | initialism }} {{ stripPrefix $field.Description $name }}
            {{ $name | capitalize | initialism }} {{ if $field.List }}[]{{ end }}{{ if or (not $field.NonNull) (eq $field.Kind "OBJECT") }}*{{ end }}{{ $field.Name }} `json:"{{ $name }}"`
        {{- end }}
    }
{{ end }}
)

// New create new graphqlclient
func New(protoClient graphqlclientgen.ProtoClient) Client {
	return Client{
		protoClient: protoClient,
	}
}

{{- range $fun := .Schema.Functions }}
// {{ $fun.Name | capitalize }} ({{ $fun.QueryType }}) {{ stripPrefix $fun.Description $fun.Name }}
func (client Client) {{ $fun.Name | capitalize }}(
    ctx context.Context,
{{- range $name, $argument := $fun.Arguments }}    
    {{ $name }} {{ if $argument.List }}[]{{ end }}{{ if not $argument.NonNull }}*{{ end }}{{ $argument.Name }},
{{- end}}
) ({{ if $fun.Type.List }}[]{{ end }}{{ if not $fun.Type.NonNull }}*{{ end }}{{ $fun.Type.Name | capitalize }}, error) {
    body := graphqlclientgen.Body{
        Query: `
        {{ $fun.QueryType }}
        {{- if $fun.Arguments }} (
        {{- range $name, $argument := $fun.Arguments }}    
            ${{ $name }}: {{ if $argument.List }}[{{ end }}{{ $argument.Name }}{{ if $argument.NonNull }}!{{ end }}{{ if $argument.List }}}{{ end }}{{ if $argument.ListNonNull }}!{{ end }},
        {{- end }}
        )
        {{- end }} {
            {{ $fun.Name }}
        {{- if $fun.Arguments }} (
        {{- range $name, $argument := $fun.Arguments }}    
                {{ $name }}: ${{ $name}},
        {{- end }}
            )
        {{- end }} {
                id,
                text,
            }
        }`,
        Variables: map[string]any{
{{- range $name, $argument := $fun.Arguments }}    
            "{{ $name }}": {{ $name }},
{{- end }}
        },
    }

    var res graphqlclientgen.Response
    if err := client.protoClient.Do(ctx, body, &res); err != nil {
        {{- if and $fun.Type.NonNull (not $fun.Type.List)}}
        return {{ $fun.Type.Name }}{}, err
        {{- else }}
        return nil, err
        {{- end }}
    }

    var data struct {
    {{ if $fun.Type.List }}
        {{ $fun.Name | capitalize }} []{{ if not $fun.Type.NonNull }}*{{ end }}{{ $fun.Type.Name }} `json:"{{ $fun.Name }}"`
    {{- else }}
        {{ $fun.Name | capitalize }} {{ $fun.Type.Name }} `json:"{{ $fun.Name }}"`
    {{- end }}
    }

    if len(res.Errors) > 0 {
        {{- if $fun.Type.NonNull }}
        return data.{{ $fun.Name | capitalize }}, errors.New(res.Errors[0].Message)
        {{- else }}
        return nil, errors.New(res.Errors[0].Message)
        {{- end }}
    }

	if err := json.Unmarshal(res.Data, &data); err != nil {
        {{- if $fun.Type.NonNull }}
        return data.{{ $fun.Name | capitalize }}, nil
        {{- else }}
        return nil, err
        {{- end }}
	}

    {{ if $fun.Type.NonNull }}
    return data.{{ $fun.Name | capitalize }}, nil
    {{- else }}
    return &data.{{ $fun.Name | capitalize }}, nil
    {{- end }}
}
{{ end }}