package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"errors"
	"fmt"
	"simple/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	todo := model.Todo{
		ID:   fmt.Sprint(r.IncrementalID),
		Text: input.Text,
	}
	r.IncrementalID += 1

	r.DB = append(r.DB, &todo)

	return &todo, nil
}

// TodoByID is the resolver for the todoById field.
func (r *queryResolver) TodoByID(ctx context.Context, id string) (*model.Todo, error) {
	for _, todo := range r.DB {
		if todo.ID == id {
			return todo, nil
		}
	}
	return nil, errors.New("not found")
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.DB, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
