package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/loa/graphqlclientgen/tests/graph/model"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Simple is the resolver for the simple field.
func (r *queryResolver) Simple(ctx context.Context) (*model.Output, error) {
	return &model.Output{Input: "simple"}, nil
}

// SimpleNillable is the resolver for the simpleNillable field.
func (r *queryResolver) SimpleNillable(ctx context.Context) (*model.Output, error) {
	return &model.Output{Input: "simpleNillable"}, nil
}

// SimpleArgument is the resolver for the simpleArgument field.
func (r *queryResolver) SimpleArgument(ctx context.Context, input string) (*model.Output, error) {
	return &model.Output{Input: input}, nil
}

// SimpleArgumentNillable is the resolver for the simpleArgumentNillable field.
func (r *queryResolver) SimpleArgumentNillable(ctx context.Context, input *string) (*model.OutputNillable, error) {
	return &model.OutputNillable{Input: input}, nil
}

// ReturnScalar is the resolver for the returnScalar field.
func (r *queryResolver) ReturnScalar(ctx context.Context, input bool) (bool, error) {
	return input, nil
}

// ReturnScalarNillable is the resolver for the returnScalarNillable field.
func (r *queryResolver) ReturnScalarNillable(ctx context.Context, input *bool) (*bool, error) {
	return input, nil
}

// CustomError is the resolver for the customError field.
func (r *queryResolver) CustomError(ctx context.Context) (*bool, error) {
	errList := gqlerror.List{}

	errList = append(errList, &gqlerror.Error{
		Path:    graphql.GetPath(ctx),
		Message: "A descriptive error message",
		Extensions: map[string]any{
			"code": "NOT_FOUND",
		},
	})

	return nil, errList
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
